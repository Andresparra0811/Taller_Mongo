
const database = 'Compañia';
const collection = 'empleados';

use(database);


//Actividad:
//1. Insertar un documento en la colección de empleados
db.empleados.insertOne(
  { '_id': 9, 'nombre': 'Daniel','apellido': 'Rodriguez','Cargo': 'Jefe de desarrollo', 'Nomina': 50000, 'fechadecontratación ': new Date('2022-02-06T20:20:13Z'),'estado':true, "empresa": {"_id": ObjectId(11)}  },
);
//2. Insertar dos documentos en la colección de empleados
db.empleados.insertMany( [
  { '_id': 10, 'nombre': 'Andres','apellido': 'Parra','Cargo': 'Gerente de Sistemas', 'Nomina': 9750000, 'fechadecontratación ': new Date('2021-06-06T20:20:13Z'),'estado':true, "empresa": {"_id": ObjectId(14)}  },
  { '_id': 11, 'nombre': 'Camilo','apellido': 'Godoy','Cargo': 'Gerente Marketing', 'Nomina': 6750000, 'fechadecontratación ': new Date('2019-02-06T20:20:13Z'),'estado':true, "empresa": {"_id": ObjectId(11)}  },
]);

//3. Insertar una colección llamada empresa con los siguientes atributos del documento:
    //a. nombre
    //b. 'direccion' 
    //c. telefono
    //d. fecha de creación
db.createCollection('empresa', {
  validator: {
    $jsonSchema: {
        bsonType: "object",
        required: ["nombre", "direccion", "telefono", "fecha de creación"],
        properties: {
          nombre: {
            bsonType: 'string',
            
          },
          direccion: {
            bsonType: 'string',
       
          },
          telefono: {
            bsonType: 'string',
          
          },
          fechadecreación: {
            bsonType: 'date',
          }
        }
    }
  }
});
//4. insertar cuatro empresas en la colección empresa    

db.empresa.insertMany([
  { '_id': 11, 'nombre': 'Compañia 1', 'direccion': 'Calle 1', 'telefono': '1234567', 'fecha de creación': new Date('2014-03-01T08:00:00Z') },
  { '_id': 12, 'nombre': 'Compañia 2', 'direccion': 'Calle 2', 'telefono': '1234567', 'fecha de creación': new Date('2022-03-01T08:00:00Z') },
  { '_id': 13, 'nombre': 'Compañia 3', 'direccion': 'Calle 3', 'telefono': '1234567', 'fecha de creación': new Date('2012-03-01T08:00:00Z') },
  { '_id': 14, 'nombre': 'Compañia 4' , 'direccion': 'Calle 4', 'telefono': '1234567', 'fecha de creación': new Date('2018-03-01T08:00:00Z') },
]);
//5. ahora a cada documento hacer agregar otro atributo llamado empresa_id que sea el _id de la empresa
db.empleados.updateMany(
  {},
  { $set: { empresa_id: 11 } }
);
db.empleados.updateOne(
  { _id: 5 },
  { $set: { empresa_id: 14 } }
);

//5. Consultar todos los empleados de la empresa x
db.empleados.find({ empresa_id: 11 }).pretty();
db.empleados.aggregate([
  {$lookup: {
    from: 'empresa',
    localField: 'empresa_id',
    foreignField: '_id',
    as: 'empresa'
  }},
  {$match: {'empresa.nombre': 'Compañia 1'}}
]);
//7. eliminar todos los empleados de la empresa x
db.empleados.deleteMany({ empresa_id: 11 });
//8. actualizar el nombre de una empresa por "Universidad Ean"
db.empresa.updateOne(
  { _id: 11 },
  { $set: { nombre: 'Universidad Ean' } }
);
//9. Consultar todos los empleados que su sueldo este entre $1000000 y $6000000
db.empleados.find({ Nomina: { $gt: 1000000, $lt: 6000000 } }).pretty();
//10. sumar todos los sueldos de los empleados de la empresa "Universidad Ean"
db.empleados.aggregate([
  {$lookup: {
    from: 'empresa',
    localField: 'empresa_id',
    foreignField: '_id',
    as: 'empresa'
  }},
  {$match: {'empresa.nombre': 'Universidad Ean'}},
  {$group: {
    _id: '$empresa.nombre',
    total: { $sum: '$Nomina' }
  }}
]);
//11. Modificar todos los empleados para que tengan un atributo array con comidas favoritas ["pizza","hamburguesa"...]
db.empleados.updateMany(
  {},
  { $set: { comidas_favoritas: [] } }
);
//12. Contar los empleados que tengan apellido Torres
db.empleados.find({ apellido: 'Torres' }).count();
//14. Consultar el empleado más joven
db.empleados.find().sort({'Fecha de Contratación': -1}).limit(1);
